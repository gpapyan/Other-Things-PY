{"title":"Quiz Title","questions":[{"question":"Which of the following keywords mark the beginning of the class definition?","answers":["def","return","class","object","all of the above"]},{"question":"Which of the following is required to create a new instance of the class?","answers":["a constructor","a class","a value-returning method","a None method","none of the above"]},{"question":"Is the following code correct?\n------------------------------\nclass A:\n    def __init__(self, b):\n        self.b = b\n\n    def display(self):\n        print(self.b)\n\nobj = A('Hello')\ndel obj","answers":["yes","no"]},{"question":"What gets printed?\n------------------\nclass Test:\n    def __init__(self):\n        self.variable = 'Old'\n        self.change(self.variable)\n\n    def change(self, var):\n        var = 'New'\n\nobj = Test()\nprint(obj.variable)","answers":["error because function 'change' canâ€™t be called in the '__init__' function","New","Old","nothing is printed","syntax error"]},{"question":"What gets printed?\n------------------\nclass Fruits:\n    def __init__(self, price):\n        self.price = price\n\n\nobj = Fruits(50)\nobj.quantity = 10\nobj.bags = 2\n\nprint(obj.quantity + len(obj.__dict__))","answers":["an exception is thrown","12","52","13","60"]},{"question":"What is getattr() used for?","answers":["to access the attribute of the object","to delete an attribute","to check if an attribute exists or not","to set an attribute"]},{"question":"Which of the following expressions calls parent class's constructor?","answers":["self.parent.__init__()","super().constructor()","super(self)","super().__init__()","non of the above"]},{"question":"Which statement below is used to inherit class B from class A?","answers":["class B extends A:","class B(A):","class B < A:","class B, A","non of the above"]},{"question":"What gets printed?\n------------------\nclass Shape:\n    def __init__(self):\n        self.color = 'black'\n\n\nclass Square(Shape):\n    def __init__(self):\n        self.edges = 4\n        super().__init__()\n\n        \nsq = Square()\nprint(sq.color)","answers":["black","None","AttributeError: 'Square' object has no attribute 'color'","invalid syntax"]},{"question":"What gets printed?\n------------------\nclass Test:\n    pass\n\n\nt = Test()\nprint(isinstance(t, object))","answers":["True","False","An exception is thrown"]},{"question":"What gets printed?\n------------------\nclass Shape:\n    pass\n\n\nclass Square(Shape):\n    def __init__(self):\n        super().__init__()\n\n\nsq = Square()\nprint(isinstance(sq, Shape))","answers":["True","False","An exception is thrown"]},{"question":"Does Python support multiple inheritance?","answers":["yes","no"]},{"question":"What gets printed?\n------------------\nclass Black:\n    def get_color(self):\n        return 'black'\n\n\nclass White:\n    def get_color(self):\n        return 'white'\n\n\nclass ColorMix(White, Black):\n    pass\n\n\nmix = ColorMix()\nprint(mix.get_color())","answers":["black","white","an exception is thrown","this program has undefined behavior"]},{"question":"What gets printed?\n------------------\nclass Test:\n    @classmethod\n    def info(cls):\n        print(cls)\n\n\nt = Test()\nt.info()","answers":["invalid syntax","an exception is thrown","<class '__main__.Test'>","<__main__.Test object at 0x02CE2BD0>","none of the above"]},{"question":"What gets printed?\n------------------\nclass Test:\n    @staticmethod\n    def info(cls):\n        print(cls)\n\n\nt = Test()\nt.info()","answers":["invalid syntax","an exception is thrown","<class '__main__.Test'>","<__main__.Test object at 0x02CE2BD0>","none of the above"]},{"question":"Which of this methods is not a magic method for class?","answers":["__call__","__repr__","__complex__","__attr__","__getitem__"]},{"question":"Which of the following functions overloads standard arithmetic operations?","answers":["__iadd__","__itruediv__","__sub__","all of the above","non of the above"]},{"question":"What gets printed?\n------------------\nclass Person:\n\n    __slots__ = 'id'\n\n    def __init__(self, id):\n        self.id = id\n\n\nobama = Person(100)\nobama.age = 49\nprint(obama.age + obama.id)","answers":["49","149","None","AttributeError: 'Person' object has no attribute 'age'","invalid syntax"]},{"question":"What gets printed?\n------------------\nclass Test:\n    def __init__(self):\n        self.__info = None\n\n    @property\n    def info(self):\n        pass\n\n    @info.setter\n    def info(self, msg: str):\n        self.__info = msg\n\n    @info.getter\n    def info(self):\n        return f'[INFO] {self.__info}'\n\n\nt = Test()\nt.info = 'something'\nprint(t.info)","answers":["invalid syntax","AttributeError: can't set attribute","[INFO] something","[INFO] None","None"]},{"question":"What gets printed?\n------------------\nimport abc\n\n\nclass Weapon(abc.ABC):\n    def __init__(self):\n        super().__init__()\n\n    def fire(self):\n        print('pew-pew')\n\n\nobj = Weapon()\nobj.fire()","answers":["TypeError","pew-pew","AttributeError: 'Weapon' object has no attribute 'fire'","None"]},{"question":"What gets printed?\n------------------\nclass A:\n\n    class B:\n        def about(self):\n            print('I am B')\n\n    def __init__(self):\n        self.b = A.B()\n\n    def __repr__(self):\n        return 'I am A'\n\n\nobj = A()\nobj.b.about()\nprint(obj)","answers":["invalid syntax","NameError: name 'B' is not defined","I am B\nI am A","I am B\n<__main__.A object at 0x02CF2DB0>"]},{"question":"def ensure_even(func):\n    def wrapped(*args, **kwargs):\n             value = func(*args, **kwargs)\n             return value if value % 2 == 0 else value - 1\n    return wrapped\n\n\n@ensure_even\ndef add(a: int, b: int) -> int:\n    return a + b\n\n\nprint(add(4, 7))","answers":["invalid syntax","an exception is thrown","10","11","<function ensure_event.<locals>.wrapped at 0x02C69810>"]},{"question":"What is the output of the following program?\n--------------------------------------------\ndef foo(x):\n    if x ==1:\n        return 1\n    else:\n        return x + foo(x - 1)\n\n\nprint(foo(4))","answers":["10","24","7","1"]},{"question":"What is the output of the program below?\n----------------------------------------\ndef mk(x):\n    def mk1():\n        print('Decorated')\n        x()\n    return mk1\n\n\ndef mk2():\n    print('Ordinary')\n\n\np = mk(mk2)\np()","answers":["Decorated\nDecorated","Ordinary\nOrdinary","Ordinary\nDecorated","Decorated\nOrdinary"]},{"question":"The code shown above can work with ____ parameters.\n---------------------------------------------------\ndef f(x):\n    def f1(*args, **kwargs):\n        print('Sanfoundry')\n        return x(*args, **kwargs)\n    return f1","answers":["2","1","any number of","0"]},{"question":"What is the output?\n-------------------\ndef f(x):\n    def f1(*args, **kwargs):\n        print('*' * 5)\n        x(*args, **kwargs)\n        print('*' * 5)\n    return f1\n\n\ndef a(x):\n    def f1(*args, **kwargs):\n        print('%'* 5)\n        x(*args, **kwargs)\n        print('%'* 5)\n    return f1\n\n\n@f\n@a\ndef p(m):\n    print(m)\n\n\np('hello')","answers":["*****\n%%%%%\nhello\n%%%%%\n*****","Error","*****%%%%%hello%%%%%*****","hello"]},{"question":"What gets printed?\n------------------\ndef feeder():\n    names = ('Joe', 'James', 'Piter', 'Sauron', 'Arthas')\n    for name in names:\n        yield name\n\n\nprint(type(feeder()))","answers":["<class 'tuple'>","<class 'generator'>","<class 'function'>","<class 'str'>"]},{"question":"What gets printed?\n------------------\ndef feeder():\n    names = ('Joe', 'James', 'Piter', 'Sauron', 'Arthas')\n    for name in names:\n        yield name\n\n\nnames = feeder()\nfor idx in range(10):\n    print(next(names), end=', ')","answers":["None","syntax error","Joe, James, Piter, Sauron, Arthas, ","An exception is thrown"]},{"question":"Which of the listed below is not an OOP principle?","answers":["polymorphism","atomicity","encapsulation","inheritance"]},{"question":"range function returns ____ .","answers":["list","generator","tuple","None"]}],"answers":[]}